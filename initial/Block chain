#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Oct  6 15:43:05 2020

@author: rohith
"""

import datetime
import hashlib
import json
from flask import Flask,jsonify


class Blockchain:
    
    def __init__(self):
        self.chain= []
        self.create_block(proof = 1,previous_hash = '0')
        
    def create_block(self,proof,previous_hash):
        block={
            'index' : len(self.chain)+1,
            'timestamp' : str(datetime.datetime.now()),
            'proof' : proof,
            'previous_hash' : previous_hash
            }
        self.chain.append(block)
        return block
    
    def get_preblock(self):
        return self.chain[-1]
    
    def proof_OW(self,pre_proof):
        new_proof = 1
        check_proof = False    
        while check_proof == False :
            hash_oper= hashlib.sha256(str(new_proof**2 - pre_proof **2).encode()).hexdigest()
            if(hash_oper[:4] == '0000') :
                check_proof= True
            else:
                new_proof=new_proof+1
        return new_proof
    
    def HASH(self, block):
        encodedblock= json.dumps(block, sort_keys=True).encode()
        return hashlib.sha256(encodedblock).hexdigest()
    
    def is_bc_valid(self, chain):
        pre_block= chain[0]
        b_index=1
        while b_index< len(chain):
            block= chain[b_index]
            if block['previous_hash']!=self.HASH(pre_block):
                return False
            pre_proof = pre_block['proof']
            proof=block['proof']
            hash_oper= hashlib.sha256(str(proof**2 - pre_proof **2).encode()).hexdigest()
            if hash_oper[:4] != '0000' :
                return False
            pre_block=block
            b_index=b_index+1
        return True
             
            
             
app=Flask(__name__)
blockchain = Blockchain()

@app.route ('/mine_block',methods=['GET'])
def mine_block() :
    pre_block=blockchain.get_preblock()
    pre_proof=pre_block['proof']
    proof=blockchain.proof_OW(pre_proof)
    block=blockchain.create_block(proof, blockchain.HASH(pre_block))
    response= { 'msg': 'congrats you just mined the block',
               'index': block['index'],
               'proof': block['proof'],
               'timestamp' : block['timestamp'],
               'previous_hash' : block['previous_hash']
               }
    return jsonify(response),200
    
        
@app.route ('/get_chain', methods = ['GET'])     
def get_chain() :
    response = {'chain': blockchain.chain,
                'length': len(blockchain.chain)
                }
    return jsonify(response),200
             

@app.route ('/is_valid', methods = ['GET'])     
def is_valid() :
    response ={'msg':'BLOCK CHAIN IS VALID'}
    if blockchain.is_bc_valid(blockchain.chain) == False:
        response['msg']='Probelem has been detected'
    return jsonify(response),200
             
app.run(host= '0.0.0.0', port=9000)
             
             
             
             
             
             